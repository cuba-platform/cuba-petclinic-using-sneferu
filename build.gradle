buildscript {
  ext.cubaVersion = '7.2.3'
  repositories {
    mavenLocal()

    maven {
      url "https://dl.bintray.com/mariodavid/cuba-components"
    }
    maven {
      url 'https://repo.cuba-platform.com/content/groups/work'
      credentials {
        username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
        password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
      }
    }
  }
  dependencies {
    classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    classpath 'com.adarshr:gradle-test-logger-plugin:2.1.0'
  }
}


def modulePrefix = 'petclinic'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')

cuba {
  artifact {
    group = 'com.haulmont.sample.petclinic'
    version = '0.1'
    isSnapshot = true
  }
}

dependencies {
  appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
}

def hsql = 'org.hsqldb:hsqldb:2.4.1'

configure([globalModule, coreModule, webModule]) {
  apply(plugin: 'java')
  apply(plugin: 'maven')
  apply(plugin: 'cuba')
  apply plugin: 'com.adarshr.test-logger'

  testlogger {
    theme 'mocha' // project level
    slowThreshold 5000
  }


  dependencies {
    testCompile('org.junit.jupiter:junit-jupiter-api:5.5.2')
    testCompile('org.junit.jupiter:junit-jupiter-engine:5.5.2')
    testCompile('org.junit.vintage:junit-vintage-engine:5.5.2')

    testCompile 'org.mockito:mockito-core:3.2.4'
    testCompile 'org.mockito:mockito-junit-jupiter:3.2.4'

    testCompile('org.spockframework:spock-core:1.2-groovy-2.5')
    testCompile('org.springframework:spring-test:4.3.1.RELEASE')

    testCompile("org.assertj:assertj-core:3.11.1")
  }

  task sourceJar(type: Jar) {
    from file('src')
    classifier = 'sources'
  }

  artifacts {
    archives sourceJar
  }
  test {
    useJUnitPlatform()

    testlogger {
      theme 'standard-parallel' // task level
    }
  }
}

configure([globalModule, coreModule, webModule]) {
  apply(plugin: 'groovy')
  sourceSets {

    main {
      groovy { srcDirs = ["src"] }
      java.outputDir = new File(project.buildDir, "classes/main")
      groovy.outputDir = new File(project.buildDir, "classes/main")
    }
    test {
      groovy { srcDirs = ["test"] }
      java.outputDir = new File(project.buildDir, "classes/test")
      groovy.outputDir = new File(project.buildDir, "classes/test")
    }
  }
  sourceSets.main.output.classesDirs.setFrom(new File(project.buildDir, "classes/main"))
  sourceSets.test.output.classesDirs.setFrom(new File(project.buildDir, "classes/test"))
}

configure(globalModule) {
  dependencies {
    if (!JavaVersion.current().isJava8()) {
      runtime('javax.xml.bind:jaxb-api:2.3.1')
      runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')
    }
  }

  entitiesEnhancing {
    main {
      enabled = true
    }
  }
}

configure(coreModule) {

  configurations {
    jdbc
    dbscripts
  }

  dependencies {
    compile(globalModule)
    compileOnly(servletApi)
    jdbc(hsql)
    testRuntime(hsql)
  }

  task cleanConf(description: 'Cleans up conf directory', type: Delete) {
    delete "$cuba.appHome/${modulePrefix}-core/conf"
  }

  task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
    appName = "${modulePrefix}-core"
    appJars(modulePrefix + '-global', modulePrefix + '-core')
  }

  task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
    dbms = 'hsql'
    host = 'localhost'
    dbName = 'petclinic'
    dbUser = 'sa'
    dbPassword = ''
  }

  task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
    dbms = 'hsql'
    host = 'localhost'
    dbName = 'petclinic'
    dbUser = 'sa'
    dbPassword = ''
  }
}

configure(webModule) {
  configurations {
    webcontent
  }

  dependencies {
    compileOnly(servletApi)
    compile(globalModule)

    testCompile('de.diedavids.sneferu:sneferu:0.3.4-SNAPSHOT')
  }

  task webArchive(type: Zip) {
    from file("$buildDir/web")
    from file('web')
    classifier = 'web'
  }

  artifacts {
    archives webArchive
  }

  task deployConf(type: Copy) {
    from file('src')
    include "com/haulmont/sample/petclinic/**"
    into "$cuba.appHome/${modulePrefix}/conf"
  }

  task clearMessagesCache(type: CubaClearMessagesCache) {
    appName = "${modulePrefix}"
  }
  deployConf.dependsOn clearMessagesCache

  task cleanConf(description: 'Cleans up conf directory', type: Delete) {
    delete "$cuba.appHome/${modulePrefix}/conf"
  }

  task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
    appName = "${modulePrefix}"
    appJars(modulePrefix + '-global', modulePrefix + '-web')
  }

  task buildScssThemes(type: CubaWebScssThemeCreation)

  task deployThemes(type: CubaDeployThemeTask, dependsOn: buildScssThemes)

  assemble.dependsOn buildScssThemes

  task themesJar(type: Jar) {
    from file('themes')
    classifier = 'themes'
  }

  artifacts {
    archives themesJar
  }
}

task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
  delete("$cuba.tomcat.dir/shared")
  delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
  delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
  doLast {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
      not {
        socket(server: 'localhost', port: '8787')
      }
    }
  }
}
restart.finalizedBy start

